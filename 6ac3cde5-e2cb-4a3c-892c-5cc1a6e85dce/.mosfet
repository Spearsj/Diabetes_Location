{
  "layout": "Choropleth",
  "rdbmsId": "6ac3cde5-e2cb-4a3c-892c-5cc1a6e85dce",
  "hidden": false,
  "engine": "Diabetes_Location",
  "insightName": "Number of Id\u0027s per State",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"core_engine\":\"Diabetes_Location\"}\u003c/encode\u003e\" ) ;CreateFrame ( GRID ) .as ( [ \u0027FRAME814831\u0027 ] ) ;Database ( Diabetes_Location ) | Select ( Country ) .as ( [ Country ] ) | Import ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" ) ;Frame ( ) | Select ( Country ) .as ( [ Country ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" ] } } } ) | Collect ( 500 ) ;Database ( Diabetes_Location ) | Select ( Country , id ) .as ( [ Country , id ] ) | Join ( ( id , inner.join , Country ) ) | Merge ( ( Country , inner.join , Country ) ) ;Frame ( ) | Select ( Country , id ) .as ( [ Country , id ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"id\" ] } } } ) | Collect ( 500 ) ;Database ( Diabetes_Location ) | Select ( id , Country , State_1 , frame , gender , location_1 , id__age , id__bp_1d , id__bp_1s , id__bp_2d , id__bp_2s , id__chol , id__glyhb , id__hdl , id__height , id__hip , id__ratio , id__stab_glu , id__time_ppn , id__waist , id__weight ) .as ( [ id , Country , State_1 , frame , gender , location_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , glyhb , hdl , height , hip , ratio , stab_glu , time_ppn , waist , weight ] ) | Join ( ( id , inner.join , Country ) , ( id , inner.join , State_1 ) , ( id , inner.join , frame ) , ( id , inner.join , gender ) , ( id , inner.join , location_1 ) ) | Merge ( ( id , inner.join , id ) ) ;Frame ( ) | Select ( Country , Country_1 , State_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , frame , gender , glyhb , hdl , height , hip , id , location_1 , ratio , stab_glu , time_ppn , waist , weight ) .as ( [ Country , Country_1 , State_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , frame , gender , glyhb , hdl , height , hip , id , location_1 , ratio , stab_glu , time_ppn , waist , weight ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Country_1\" , \"State_1\" , \"age\" , \"bp_1d\" , \"bp_1s\" , \"bp_2d\" , \"bp_2s\" , \"chol\" , \"frame\" , \"gender\" , \"glyhb\" , \"hdl\" , \"height\" , \"hip\" , \"id\" , \"location_1\" , \"ratio\" , \"stab_glu\" , \"time_ppn\" , \"waist\" , \"weight\" ] } } } ) | Collect ( 500 ) ;Database ( Diabetes_Location ) | Select ( id , State_1 ) .as ( [ id , State_1 ] ) | Join ( ( id , inner.join , State_1 ) ) | Merge ( ( id , inner.join , id ) ) ;Frame ( ) | Select ( Country , Country_1 , State_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , frame , gender , glyhb , hdl , height , hip , id , location_1 , ratio , stab_glu , time_ppn , waist , weight ) .as ( [ Country , Country_1 , State_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , frame , gender , glyhb , hdl , height , hip , id , location_1 , ratio , stab_glu , time_ppn , waist , weight ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Country_1\" , \"State_1\" , \"age\" , \"bp_1d\" , \"bp_1s\" , \"bp_2d\" , \"bp_2s\" , \"chol\" , \"frame\" , \"gender\" , \"glyhb\" , \"hdl\" , \"height\" , \"hip\" , \"id\" , \"location_1\" , \"ratio\" , \"stab_glu\" , \"time_ppn\" , \"waist\" , \"weight\" ] } } } ) | Collect ( 500 ) ;Database ( Diabetes_Location ) | Select ( id , location_1 ) .as ( [ id , location_1 ] ) | Join ( ( id , inner.join , location_1 ) ) | Merge ( ( id , inner.join , id ) ) ;Frame ( ) | Select ( Country , Country_1 , State_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , frame , gender , glyhb , hdl , height , hip , id , location_1 , ratio , stab_glu , time_ppn , waist , weight ) .as ( [ Country , Country_1 , State_1 , age , bp_1d , bp_1s , bp_2d , bp_2s , chol , frame , gender , glyhb , hdl , height , hip , id , location_1 , ratio , stab_glu , time_ppn , waist , weight ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Grid\" , \"alignment\" : { \"label\" : [ \"Country\" , \"Country_1\" , \"State_1\" , \"age\" , \"bp_1d\" , \"bp_1s\" , \"bp_2d\" , \"bp_2s\" , \"chol\" , \"frame\" , \"gender\" , \"glyhb\" , \"hdl\" , \"height\" , \"hip\" , \"id\" , \"location_1\" , \"ratio\" , \"stab_glu\" , \"time_ppn\" , \"waist\" , \"weight\" ] } } } ) | Collect ( 500 ) ;if ( ( HasDuplicates ( Country ) ) , ( Select ( Country , Count ( Country_1 ) ) .as ( [ Country , CountofCountry_1 ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Choropleth\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"CountofCountry_1\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( Country , Count ( Country_1 ) ) .as ( [ Country , CountofCountry_1 ] ) | Group ( Country ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Choropleth\" , \"alignment\" : { \"label\" : [ \"Country\" ] , \"value\" : [ \"CountofCountry_1\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;if ( ( HasDuplicates ( State_1 ) ) , ( Select ( State_1 , Count ( id ) ) .as ( [ State_1 , Countofid ] ) | Group ( State_1 ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Choropleth\" , \"alignment\" : { \"label\" : [ \"State_1\" ] , \"value\" : [ \"Countofid\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( State_1 , Count ( id ) ) .as ( [ State_1 , Countofid ] ) | Group ( State_1 ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Choropleth\" , \"alignment\" : { \"label\" : [ \"State_1\" ] , \"value\" : [ \"Countofid\" ] , \"facet\" : [ ] } } } ) | Collect ( 500 ) ) ) ;Panel(0)|AddPanelOrnaments({\"showMenu\":true});Panel(0)|RetrievePanelOrnaments(\"showMenu\");"
}